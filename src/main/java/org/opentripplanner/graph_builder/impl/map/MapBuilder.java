/* This program is free software: you can redistribute it and/or
 modify it under the terms of the GNU Lesser General Public License
 as published by the Free Software Foundation, either version 3 of
 the License, or (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>. */

package org.opentripplanner.graph_builder.impl.map;

import com.vividsolutions.jts.geom.Coordinate;
import com.vividsolutions.jts.geom.LineString;
import org.onebusaway.gtfs.model.Route;
import org.opentripplanner.common.geometry.GeometryUtils;
import org.opentripplanner.extra_graph.EdgesForRoute;
import org.opentripplanner.graph_builder.services.GraphBuilder;
import org.opentripplanner.routing.core.TraverseMode;
import org.opentripplanner.routing.edgetype.TripPattern;
import org.opentripplanner.routing.graph.Edge;
import org.opentripplanner.routing.graph.Graph;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;

/**
 * All we know is that this is used to "match geometry to streets".
 * TODO: Investigate and add comments.
 */
public class MapBuilder implements GraphBuilder {
    private static final Logger log = LoggerFactory.getLogger(MapBuilder.class);

    public List<String> provides() {
        return Arrays.asList("edge matching");
    }

    public List<String> getPrerequisites() {
        return Arrays.asList("streets", "transit", "transitIndex");
    }

    // TODO What is "extra", and why are we storing an EdgesForRoute in it?
    // It is a mechanism for passing arbitrary stuff between graphbuilders.
    // An EdgesForRoute is generated by MapBuilder and StreetMatcher, then retrieved by the
    // NetworkLinkerLibrary later (actually in LinkRequests).
    // The purpose appears to be encouraging the linker to link to streets where transit actually travels.
    // So this is using the shapes from GTFS to decide which edges are used by which routes.
    public void buildGraph(Graph graph, HashMap<Class<?>, Object> extra) {
        StreetMatcher matcher = new StreetMatcher(graph);
        EdgesForRoute edgesForRoute = new EdgesForRoute();
        extra.put(EdgesForRoute.class, edgesForRoute);
        log.info("matching route variants to street edges...");
        // Why do we need to iterate over the routes? Why not just patterns?
        for (Route route : graph.index.routeForId.values()) {
            for (TripPattern pattern : graph.index.patternsForRoute.get(route)) {
                if (pattern.mode == TraverseMode.BUS) {
                    /* we can only match geometry to streets on bus routes */
                    // FIXME patterns do not have geometries generated, so this can't work
                    log.debug("Matching {} ncoords={}", pattern, pattern.geometry.getNumPoints());
                    List<Edge> edges = matcher.match(pattern.geometry);
                    if (edges == null) {
                        log.warn("Could not match to street network: {}", pattern);
                        continue;
                    }
                    List<Coordinate> coordinates = new ArrayList<Coordinate>();
                    for (Edge e : edges) {
                        coordinates.addAll(Arrays.asList(e.getGeometry().getCoordinates()));
                        edgesForRoute.edgesForRoute.put(route, e);
                    }
                    Coordinate[] coordinateArray = new Coordinate[coordinates.size()];
                    LineString ls = GeometryUtils.getGeometryFactory().createLineString(coordinates.toArray(coordinateArray));
                    pattern.geometry = ls;
                }
            }
        }
    }

    @Override
    public void checkInputs() {
        //no file inputs
    }
}